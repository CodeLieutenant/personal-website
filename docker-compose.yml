services:
    nginx:
        image: nginx:1.23-alpine
        restart: unless-stopped
        ports:
            - '80:80'
            - '443:443'
        volumes:
            - '.:/var/www/html'
            - './docker/nginx:/etc/nginx'
            - './storage/keys:/etc/keys'
        networks:
            - dusan_malusev
        depends_on:
            - laravel.test
    laravel.test:
        build:
            context: .
            dockerfile: docker/php/Dockerfile
            target: develop
            args:
                WWWGROUP: '${WWWGROUP}'
                WWWUSER: '${WWWUSER}'
        image: ghcr.io/dmalusev/website:latest
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '8080:8080'
            - '5173:5173'
            - '2019:2019'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal idekey=PHPSTORM}'
        volumes:
            - .:/var/www/html
        networks:
            - dusan_malusev
    pgsql:
        image: 'postgres:15-alpine'
        ports:
            - '5432:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE:-dusan_malusev}'
            POSTGRES_USER: '${DB_USERNAME:-dusan_malusev}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-dusan_malusev}'
        volumes:
            - 'dusan_malusev-pgsql:/var/lib/postgresql/data'
            - './docker/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
            - './docker/pgsql/create-umami-database.sql:/docker-entrypoint-initdb.d/10-create-umami-database.sql'
            - './docker/pgsql/create-grafana-database.sql:/docker-entrypoint-initdb.d/10-create-grafana-database.sql'
        networks:
            - dusan_malusev
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        networks:
            - dusan_malusev
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
#     minio:
#         image: 'minio/minio:latest'
#         ports:
#             - '${FORWARD_MINIO_CONSOLE_PORT:-8900}:8900'
#         environment:
#             MINIO_ROOT_USER: dusan_malusev
#             MINIO_ROOT_PASSWORD: password
#         volumes:
#             - 'dusan_malusev-minio:/data/minio'
#         networks:
#             - dusan_malusev
#         command: 'minio server /data/minio --console-address ":8900"'
#         healthcheck:
#             test:
#                 - CMD
#                 - curl
#                 - '-f'
#                 - 'http://localhost:9000/minio/health/live'
#             retries: 3
#             timeout: 5s
#     meilisearch:
#         image: 'getmeili/meilisearch:latest'
#         ports:
#             - '${FORWARD_MEILISEARCH_PORT:-7700}:7700'
#         volumes:
#             - 'dusan_malusev-meilisearch:/meili_data'
#         networks:
#             - dusan_malusev
#         healthcheck:
#             test:
#                 - CMD
#                 - wget
#                 - '--no-verbose'
#                 - '--spider'
#                 - 'http://localhost:7700/health'
#             retries: 3
#             timeout: 5s
#     mailpit:
#         image: 'axllent/mailpit:latest'
#         ports:
#             - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
#         networks:
#             - dusan_malusev
#     selenium:
#         image: selenium/standalone-chrome
#         extra_hosts:
#             - 'host.docker.internal:host-gateway'
#         volumes:
#             - '/dev/shm:/dev/shm'
#         networks:
#             - dusan_malusev
    soketi:
        image: 'quay.io/soketi/soketi:latest-16-alpine'
        depends_on:
            - pgsql
            - redis
        environment:
            SOKETI_DEBUG: '${SOKETI_DEBUG:-1}'
            SOKETI_METRICS_SERVER_PORT: '9601'
            SOKETI_APP_MANAGER_DRIVER: 'postgres'
            SOKETI_APP_MANAGER_CACHE_ENABLED: true
            SOKETI_APP_MANAGER_CACHE_TTL: 3600
            SOKETI_DB_REDIS_HOST: ${REDIS_HOST:-redis}
            SOKETI_DB_REDIS_PORT: ${REDIS_PORT:-6379}
            SOKETI_DB_REDIS_DB: ${REDIS_SOKETI_DB:-3}
            SOKETI_DB_POSTGRES_HOST: ${DB_HOST:-pgsql}
            SOKETI_DB_POSTGRES_PORT: ${DB_PORT:-5432}
            SOKETI_CACHE_DRIVER: 'redis'
            SOKETI_QUEUE_DRIVER: 'redis'
            SOKETI_RATE_LIMITER_DRIVER: 'redis'
            SOKETI_RATE_LIMITER_REDIS_CLUSTER_MODE: false
            CACHE_REDIS_CLUSTER_MODE: false
            SOKETI_DB_POSTGRES_USERNAME: ${DB_USERNAME:-dusan_malusev}
            SOKETI_DB_POSTGRES_PASSWORD: ${DB_PASSWORD:-dusan_malusev}
            SOKETI_DB_POSTGRES_DATABASE: ${DB_DATABASE:-dusan_malusev}
            SOKETI_APP_MANAGER_POSTGRES_TABLE: 'socketi_apps'
            SOKETI_APP_MANAGER_POSTGRES_VERSION: '15'
            SOKETI_DB_POOLING_ENABLED: true
            SOKETI_DB_POOLING_MIN: 1
            SOKETI_DB_POOLING_MAX: 100
            SOKETI_METRICS_ENABLED: 1
            SOKETI_QUEUE_REDIS_CONCURRENCY: 10
        networks:
            - dusan_malusev
        ports:
            - 6001:6001
#     umami:
#         image: ghcr.io/umami-software/umami:postgresql-latest
#         ports:
#           - "3000:3000"
#         environment:
#           DATABASE_URL: 'postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/umami'
#           DATABASE_TYPE: postgresql
#           APP_SECRET: '${UMAMI_APP_SECRET}'
#         depends_on:
#           - pgsql
#         restart: unless-stopped
#         networks:
#             - dusan_malusev
    dozzle:
        image: amir20/dozzle:latest
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        ports:
            - 8000:8080
networks:
    dusan_malusev:
        name: dusan_malusev
        driver: bridge
volumes:
    dusan_malusev-pgsql:
        driver: local
    dusan_malusev-redis:
        driver: local
    dusan_malusev-minio:
        driver: local
    dusan_malusev-meilisearch:
        driver: local
